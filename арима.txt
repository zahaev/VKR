import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error
from hurst import compute_Hc
from scipy.spatial.distance import pdist
from sklearn.preprocessing import MinMaxScaler


# 1. Генерация временного ряда
def generate_time_series(r, x0, n):
    series = [x0]
    for _ in range(n):
        series.append(r * series[-1] * (1 - series[-1]))
    return series


# 2. Загрузка пользовательского датасета
def load_custom_dataset(file_path=None):
    if file_path:
        try:
            data = pd.read_csv(file_path)
            if len(data.columns) > 1:
                print("Выберите столбец для анализа:")
                for i, col in enumerate(data.columns):
                    print(f"{i}: {col}")
                choice = int(input("Введите номер столбца: "))
                series = data.iloc[:, choice].values
            else:
                series = data.iloc[:, 0].values
            return series
        except Exception as e:
            print(f"Ошибка при загрузке файла: {e}")
            return None
    else:
        print("Введите временной ряд через пробел:")
        series = list(map(float, input().split()))
        return series


# Основная часть программы
if __name__ == "__main__":
    print("Выберите источник данных:")
    print("1. Сгенерировать временной ряд")
    print("2. Загрузить из CSV файла")
    print("3. Ввести данные вручную")
    choice = int(input("Введите номер варианта: "))

    if choice == 1:
        r = float(input("Введите параметр r: "))
        x0 = float(input("Введите начальное значение x0: "))
        n = int(input("Введите длину ряда n: "))
        time_series = generate_time_series(r, x0, n)
    elif choice == 2:
        file_path = input("Введите путь к CSV файлу: ")
        time_series = load_custom_dataset(file_path)
        if time_series is None:
            exit()
    elif choice == 3:
        time_series = load_custom_dataset()
    else:
        print("Неверный выбор.")
        exit()

    # Проверка и предварительная обработка данных
    time_series = np.array(time_series)
    time_series = time_series[~np.isnan(time_series)]  # Удаление NaN
    time_series = time_series[np.isfinite(time_series)]  # Удаление Inf

    # Визуализация временного ряда
    plt.figure(figsize=(12, 5))
    plt.plot(time_series, label="Временной ряд")
    plt.title("Сгенерированный/загруженный временной ряд")
    plt.xlabel("Время")
    plt.ylabel("Значение")
    plt.legend()
    plt.grid(True)
    plt.show()

    # Нормализация данных
    scaler = MinMaxScaler(feature_range=(0, 1))
    time_series_scaled = scaler.fit_transform(time_series.reshape(-1, 1)).flatten()

    # Разделение на обучающую и тестовую выборки
    train_size = int(len(time_series_scaled) * 0.7)
    train, test = time_series_scaled[:train_size], time_series_scaled[train_size:]

    # Обучение ARIMA модели
    p = 5  # порядок авторегрессии
    d = 0  # интеграция
    q = 1  # порядок скользящего среднего

    model = ARIMA(train, order=(p, d, q))
    arma_result = model.fit()

    # Прогнозирование
    forecast = arma_result.forecast(steps=len(test))
    predictions = forecast # Получаем значения как numpy array

    # Денормализация прогноза
    predictions = predictions.reshape(-1, 1)
    predictions_original = scaler.inverse_transform(predictions)

    # Денормализация тестовой выборки для корректного сравнения
    test_reshaped = test.reshape(-1, 1)
    test_original = scaler.inverse_transform(test_reshaped).flatten()

    # Вычисление ошибок
    mae = mean_absolute_error(test_original, predictions_original)
    rmse = np.sqrt(mean_squared_error(test_original, predictions_original))
    mape = mean_absolute_percentage_error(test_original, predictions_original) * 100  # В процентах

    print(f"Средняя абсолютная ошибка (MAE): {mae:.6f}")
    print(f"Корень из MSE (RMSE): {rmse:.6f}")
    print(f"Средняя абсолютная процентная ошибка (MAPE): {mape:.2f}%")

    # Визуализация
    plt.figure(figsize=(12, 6))
    plt.plot(time_series, label="Исходные данные")
    plt.plot(range(train_size, train_size + len(predictions)), predictions_original,label='Прогноз')
    plt.title("Прогноз временного ряда (ARIMA)")
    plt.xlabel("Время")
    plt.ylabel("Значение")
    plt.legend()
    plt.grid(True)
    plt.show()

    # Показатель Хёрста
    H, c, data = compute_Hc(time_series, kind='change', simplified=True)
    print(f"Показатель Хёрста (H): {H:.4f}")
    if abs(H - 0.5) < 0.05:
        print("Гипотеза H = 0.5 не отвергается (возможно, случайное блуждание).")
    else:
        print("Гипотеза H = 0.5 отвергается.")

    # Показатель Ляпунова
    def lyapunov_exponent(series):
        deltas = []
        for i in range(1, len(series)):
            delta = abs(series[i] - series[i - 1])
            if delta > 0:
                deltas.append(np.log(delta))
        return np.mean(deltas) if deltas else float('nan')

    lyapunov = lyapunov_exponent(time_series)
    print(f"Показатель Ляпунова: {lyapunov:.4f}")
    if not np.isnan(lyapunov):
        if lyapunov < 0:
            print("Система устойчива (показатель Ляпунова < 0).")
        else:
            print("Система неустойчива (показатель Ляпунова >= 0).")
    else:
        print("Не удалось рассчитать показатель Ляпунова — возможно, нулевые изменения.")

    print(f"Параметры ARIMA: (p={p}, d={d}, q={q})")