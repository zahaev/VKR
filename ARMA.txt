import numpy as np
import matplotlib.pyplot as plt
from hurst import compute_Hc
from statsmodels.tsa.arima.model import ARIMA
from sklearn.preprocessing import MinMaxScaler
import pandas as pd
from scipy.spatial.distance import pdist
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error

# 1. Генерация временного ряда
def generate_time_series(r, x0, n):
    if n == 0:
        return [x0]
    else:
        series = generate_time_series(r, x0, n - 1)
        next_value = r * series[-1] * (1 - series[-1])
        series.append(next_value)
        return series

# 2. Вычисление времени задержки (delay time)
def compute_delay_time(series, max_lag=20):
    """Вычисление времени задержки с помощью взаимной информации."""
    def mutual_information(series, lag):
        series = series[~np.isnan(series)]  # Удаление NaN значений
        hist, _, _ = np.histogram2d(series[:-lag], series[lag:], bins=10)
        hist = hist / np.sum(hist) if np.sum(hist) > 0 else np.zeros_like(hist)
        return -np.sum(hist * np.log(hist + 1e-10))
    
    mis = [mutual_information(series, lag) for lag in range(1, max_lag)]
    delay = np.argmin(mis) + 1  # Первый минимум взаимной информации
    return delay

# 3. Оценка размерности вложения (embedding dimension)
def compute_embedding_dimension(series, delay, max_dim=10):
    """Оценка размерности вложения с помощью метода ложных ближайших соседей."""
    def false_nearest_neighbors(series, dim, delay):
        max_len = len(series) - dim * delay
        if max_len <= 0:
            return 1.0  # Недостаточно данных для вложения

        embedded = np.array([series[i:i + dim * delay:delay] for i in range(max_len)])
        if embedded.size == 0 or embedded.ndim != 2:
            return 1.0  # Возвращаем максимальное значение FNN, если массив некорректный

        distances = pdist(embedded)
        threshold = np.mean(distances) * 0.1
        fnn = np.mean([1 if d < threshold else 0 for d in distances])
        return fnn
    
    fnns = [false_nearest_neighbors(series, dim, delay) for dim in range(1, max_dim)]
    embedding_dim = np.argmin(fnns) + 1
    return embedding_dim

# 4. Подготовка данных для ARMA модели
def prepare_data_for_arma(series, delay, embedding_dim):
    scaler = MinMaxScaler(feature_range=(0, 1))
    series = np.array(series).reshape(-1, 1)
    series = scaler.fit_transform(series)  # Нормализация данных
    
    X, y = [], []
    for i in range(len(series) - embedding_dim * delay):
        X.append(series[i:i + embedding_dim * delay:delay, 0])  # Метод задержек
        y.append(series[i + embedding_dim * delay, 0])
    
    X = np.array(X)
    y = np.array(y)
    return X, y, scaler

# 5. Загрузка пользовательского датасета
def load_custom_dataset(file_path=None):
    if file_path:
        try:
            data = pd.read_csv(file_path)
            if len(data.columns) > 1:
                print("Выберите столбец для анализа:")
                for i, col in enumerate(data.columns):
                    print(f"{i}: {col}")
                choice = int(input("Введите номер столбца: "))
                series = data.iloc[:, choice].values
            else:
                series = data.iloc[:, 0].values
            return series
        except Exception as e:
            print(f"Ошибка при загрузке файла: {e}")
            return None
    else:
        print("Введите временной ряд через пробел:")
        series = list(map(float, input().split()))
        return series

# Основная часть программы
if __name__ == "__main__":
    print("Выберите источник данных:")
    print("1. Сгенерировать временной ряд")
    print("2. Загрузить из CSV файла")
    print("3. Ввести данные вручную")
    choice = int(input("Введите номер варианта: "))

    if choice == 1:
        r = float(input("Введите параметр r: "))
        x0 = float(input("Введите начальное значение x0: "))
        n = int(input("Введите длину ряда n: "))
        time_series = generate_time_series(r, x0, n)
    elif choice == 2:
        file_path = input("Введите путь к CSV файлу: ")
        time_series = load_custom_dataset(file_path)
        if time_series is None:
            exit()
    elif choice == 3:
        time_series = load_custom_dataset()
    else:
        print("Неверный выбор.")
        exit()

    # Проверка и предварительная обработка данных
    time_series = np.array(time_series)
    time_series = time_series[~np.isnan(time_series)]  # Удаление NaN
    time_series = time_series[np.isfinite(time_series)]  # Удаление Inf

    # Визуализация временного ряда
    plt.plot(time_series, label="Временной ряд")
    plt.title("Сгенерированный/загруженный временной ряд")
    plt.xlabel("Время")
    plt.ylabel("Значение")
    plt.legend()
    plt.show()

    # Вычисление параметров для теоремы Такенса
    delay_time = compute_delay_time(time_series)
    max_dim = min(10, len(time_series) // delay_time)  # Ограничиваем максимальную размерность
    embedding_dim = compute_embedding_dimension(time_series, delay_time, max_dim=max_dim)

    print(f"Время задержки: {delay_time}")
    print(f"Размерность вложения: {embedding_dim}")

    # Подготовка данных для ARMA модели
    X, y, scaler = prepare_data_for_arma(time_series, delay_time, embedding_dim)

    # Разделение на обучающую и тестовую выборки
    train_size = int(len(X) * 0.7)
    X_train, X_test = X[:train_size], X[train_size:]
    y_train, y_test = y[:train_size], y[train_size:]

    # Обучение ARMA модели
    p = embedding_dim  # Порядок AR
    q = 1  # Порядок MA (можно изменить)
    arma_model = ARIMA(y_train, order=(p, 0, q))  # ARIMA(p, 0, q) эквивалентно ARMA(p, q)
    arma_result = arma_model.fit()

    # Предсказание на тестовой выборке
    predictions_scaled = arma_result.forecast(steps=len(y_test))
    predictions = scaler.inverse_transform(np.array(predictions_scaled).reshape(-1, 1))  # Денормализация
    y_test_original = scaler.inverse_transform(y_test.reshape(-1, 1))  # Денормализация

    # Вычисление ошибок
    rmse = np.sqrt(mean_squared_error(y_test_original, predictions))
    mape = mean_absolute_percentage_error(y_test_original, predictions) * 100  # В процентах

    print(f"Средняя абсолютная процентная ошибка (MAPE): {mape:.2f}%")
    print(f"Корень из MSE (RMSE): {rmse:.6f}")

    # Визуализация предсказаний
    plt.figure(figsize=(12, 6))
    plt.plot(range(len(time_series)), time_series, label="Исходный ряд")
    plt.plot(range(len(time_series) - len(predictions), len(time_series)), predictions, label="Предсказания", color='red')
    plt.title("Предсказание временного ряда (ARMA)")
    plt.xlabel("Время")
    plt.ylabel("Значение")
    plt.legend()
    plt.grid(True)
    plt.show()

    # Проверка гипотезы H = 0.5
    def check_hurst_exponent(series):
        H, c, data = compute_Hc(series, kind='change', simplified=True)
        return H

    H = check_hurst_exponent(time_series)
    print(f"Показатель Хёрста (H): {H:.4f}")
    if abs(H - 0.5) < 0.05:
        print("Гипотеза H = 0.5 не отвергается.")
    else:
        print("Гипотеза H = 0.5 отвергается.")

    # Оценка показателя Ляпунова
    def lyapunov_exponent(series):
        deltas = []
        for i in range(1, len(series)):
            delta = abs(series[i] - series[i - 1])
            if delta > 0:
                deltas.append(np.log(delta))
        return np.mean(deltas) if deltas else float('nan')

    lyapunov = lyapunov_exponent(time_series)
    print(f"Показатель Ляпунова: {lyapunov:.4f}")
    if not np.isnan(lyapunov):
        if lyapunov < 0:
            print("Система устойчива (показатель Ляпунова < 0).")
        else:
            print("Система неустойчива (показатель Ляпунова >= 0).")
    else:
        print("Не удалось рассчитать показатель Ляпунова — возможно, нулевые изменения.")

    print(f"Порядок AR модели (p): {p}, Порядок MA модели (q): {q}")
